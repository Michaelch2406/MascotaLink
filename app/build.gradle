plugins {
    alias(libs.plugins.android.application)
    id 'com.google.gms.google-services'
}

android {
    namespace 'com.mjc.mascotalink'
    compileSdk 36

    defaultConfig {
        applicationId "com.mjc.mascotalink"
        minSdk 32
        targetSdk 34
        versionCode 1
        versionName "1.0"

        // Leer la clave de API desde local.properties y asignarla a manifestPlaceholders
        def localProperties = new Properties()
        def localPropertiesFile = rootProject.file('local.properties')
        if (localPropertiesFile.exists()) {
            localProperties.load(new FileInputStream(localPropertiesFile))
        }
        manifestPlaceholders = [MAPS_API_KEY: localProperties.getProperty('mapsApiKey', "")]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // Solo ABI de destino del dispositivo: reduce tamaño y elimina x86/x86_64
        ndk {
            abiFilters "arm64-v8a", "x86_64"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        baseline = file("lint-baseline.xml")
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {

    implementation platform('com.google.firebase:firebase-bom:34.2.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-auth'
    implementation 'com.google.firebase:firebase-firestore'
    implementation 'com.google.firebase:firebase-storage'         // <- subir fotos, docs, videos
    implementation 'com.google.firebase:firebase-messaging'       // <- push notifications
    implementation 'com.google.firebase:firebase-functions'      // <- llamadas a Cloud Functions (opcional)


    // Places API
    implementation 'com.google.android.libraries.places:places:4.1.0'

    // CameraX
    implementation 'androidx.camera:camera-core:1.5.0'
    implementation 'androidx.camera:camera-camera2:1.5.0'
    implementation 'androidx.camera:camera-lifecycle:1.5.0'
    implementation 'androidx.camera:camera-view:1.5.0'
    implementation 'androidx.camera:camera-video:1.5.0'

    // ML Kit vía Google Play services (evita incluir .so en el APK)
    implementation 'com.google.android.gms:play-services-mlkit-face-detection:+'
    implementation 'com.google.android.gms:play-services-mlkit-text-recognition:+'

    // Google Play Services (Maps + Location para zonas y geoubicación)
    implementation 'com.google.android.gms:play-services-maps:19.2.0'
    implementation 'com.google.maps.android:android-maps-utils:3.19.0'
    implementation 'com.google.android.gms:play-services-location:21.3.0'

        // FirebaseUI Auth (opcional, facilita login/registro con providers)
    implementation 'com.firebaseui:firebase-ui-auth:9.0.0'         // opcional pero muy práctico

    // Image loading / caching
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    implementation 'de.hdodenhof:circleimageview:3.1.0'
    implementation libs.swiperefreshlayout// Para vistas de imagen circulares

    // TESTING Y VALIDACIÓN
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'


    annotationProcessor 'com.github.bumptech.glide:compiler:5.0.5' // si usas Java (Glide requiere annotation processor)
    implementation libs.appcompat
    implementation libs.material
    implementation libs.activity
    implementation libs.constraintlayout
    testImplementation libs.junit
    androidTestImplementation libs.ext.junit
    androidTestImplementation libs.espresso.core
}