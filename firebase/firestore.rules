rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Funci칩n para verificar que el usuario es due침o del documento
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Colecciones de perfiles: duenos y paseadores
    match /duenos/{userId} {
      // Cualquiera autenticado puede leer perfiles (para listados, etc.)
      allow read: if request.auth != null;

      // El usuario puede crear su propio documento
      allow create: if isOwner(userId);

      // El usuario puede actualizar su propio documento, pero con restricciones
      allow update: if isOwner(userId) &&
                      // Campos que no se pueden cambiar una vez establecidos
                      request.resource.data.rol == resource.data.rol &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.cedula == resource.data.cedula &&
                      request.resource.data.fechaRegistro == resource.data.fechaRegistro &&
                      // Campos de verificaci칩n que el usuario no puede tocar
                      request.resource.data.verificacion_estado == resource.data.verificacion_estado &&
                      request.resource.data.verificacion_fecha == resource.data.verificacion_fecha;

      // Nadie puede borrar perfiles directamente
      allow delete: if false;
    }

    match /paseadores/{userId} {
      // Cualquiera autenticado puede leer perfiles (para listados, etc.)
      allow read: if request.auth != null;

      // El usuario puede crear su propio documento
      allow create: if isOwner(userId);

      // El usuario puede actualizar su propio documento, pero con restricciones
      allow update: if isOwner(userId) &&
                      // Campos que no se pueden cambiar una vez establecidos
                      request.resource.data.rol == resource.data.rol &&
                      request.resource.data.email == resource.data.email &&
                      request.resource.data.cedula == resource.data.cedula &&
                      request.resource.data.fechaRegistro == resource.data.fechaRegistro &&
                      // Campos de verificaci칩n que el usuario no puede tocar
                      request.resource.data.verificacion_estado == resource.data.verificacion_estado &&
                      request.resource.data.verificacion_fecha == resource.data.verificacion_fecha;

      // Nadie puede borrar perfiles directamente
      allow delete: if false;
    }

    // Subcolecciones bajo usuarios
    match /usuarios/{userId}/metodos_pago/{metodoId} {
      allow read, write: if isOwner(userId);
    }

    // Mascotas dentro de duenos
    match /duenos/{duenoId}/mascotas/{mascotaId} {
      allow read, write: if isOwner(duenoId);
    }

    // Servicios
    match /servicios/{servicioId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.due_id ||
        request.auth.uid == resource.data.pas_id
      );

      allow create: if request.auth != null &&
                    request.auth.uid == request.resource.data.due_id;

      allow update: if request.auth != null && (
        (request.auth.uid == resource.data.due_id && request.resource.data.estado in ['SOLICITADO', 'CANCELADO', 'COMPLETADO']) ||
        (request.auth.uid == resource.data.pas_id && request.resource.data.estado in ['CONFIRMADO', 'EN_PROGRESO'])
      );

      allow delete: if false;
    }

    // Chats y mensajes
    match /chats/{chatId} {
      allow read, write: if request.auth != null &&
                        request.auth.uid in resource.data.participantes_ids;

      match /messages/{messageId} {
        allow read, write: if request.auth != null &&
                          request.auth.uid in resource.data.participantes_ids;
      }
    }
  }
}
