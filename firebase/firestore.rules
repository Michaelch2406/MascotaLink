rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Función para verificar que el usuario es dueño del documento
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Regla para la colección principal de usuarios
    match /usuarios/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId) &&
                     (resource == null || (
                        request.resource.data.rol == resource.data.rol &&
                        request.resource.data.cedula == resource.data.cedula
                     ));
      allow delete: if false;
    }

    // Colecciones de perfiles: duenos y paseadores
    match /duenos/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId);
      allow delete: if false;
    }

    match /paseadores/{userId} {
      allow read: if request.auth != null;
      allow write: if isOwner(userId);
      allow delete: if false;
    }

    // Subcolecciones bajo usuarios
    match /usuarios/{userId}/metodos_pago/{metodoId} {
      allow read, write: if isOwner(userId);
    }

    // Mascotas dentro de duenos
    match /duenos/{duenoId}/mascotas/{mascotaId} {
      allow read, write: if isOwner(duenoId);
    }

    // Subcolecciones bajo paseadores
    match /paseadores/{userId}/disponibilidad/{disponibilidadId} {
      allow read, create, update, delete: if isOwner(userId);
    }

    match /paseadores/{userId}/zonas_servicio/{zonaId} {
      allow read, create, update, delete: if isOwner(userId);
    }

    // Servicios
    match /servicios/{servicioId} {
      // Solo el dueño o el paseador pueden leer un servicio específico.
      // La regla de listado (query) se debe manejar a nivel de la app.
      allow read: if resource != null && request.auth != null && 
                  (request.auth.uid == resource.data.due_id || request.auth.uid == resource.data.pas_id);

      // El dueño crea el servicio.
      allow create: if request.auth != null &&
                    request.auth.uid == request.resource.data.due_id;

      // Dueño y paseador pueden actualizar estados específicos.
      allow update: if resource != null && request.auth != null && (
        (request.auth.uid == resource.data.due_id && request.resource.data.estado in ['SOLICITADO', 'CANCELADO', 'COMPLETADO']) ||
        (request.auth.uid == resource.data.pas_id && request.resource.data.estado in ['CONFIRMADO', 'EN_PROGRESO'])
      );

      allow delete: if false;
    }

    // Chats y mensajes
    match /chats/{chatId} {
      // Un participante puede leer o actualizar un chat.
      allow read, update: if resource != null && request.auth != null &&
                         request.auth.uid in resource.data.participantes_ids;
      
      // Un usuario puede crear un chat si es uno de los participantes.
      allow create: if request.auth != null &&
                      request.auth.uid in request.resource.data.participantes_ids;

      match /messages/{messageId} {
        // Para leer/actualizar un mensaje, el usuario debe estar en la lista de participantes del chat padre.
        allow read, update: if request.auth != null &&
                           request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantes_ids;
        
        // Para crear un mensaje, el usuario debe ser el sender y estar en la lista de participantes del chat padre.
        allow create: if request.auth != null &&
                        request.auth.uid == request.resource.data.sender_id &&
                        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantes_ids;
      }
    }
  }
}